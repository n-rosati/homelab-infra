apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: kube-prometheus-stack
spec:
  interval: 2m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 77.14.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3
  values:
    grafana:
      enabled: false
      forceDeployDashboards: true
      defaultDashboardsEnabled: true
      forceDeployDatasources: true
      defaultDashboardsTimezone: America/Toronto
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      service:
        port: 2379
        targetPort: 2379
        selector:
          component: kube-apiserver # etcd runs on control plane nodes
      serviceMonitor:
        scheme: https
        insecureSkipVerify: false
        serverName: "localhost"
        caFile: "/etc/prometheus/secrets/etcd-client-cert/etcd-ca.crt"
        certFile: "/etc/prometheus/secrets/etcd-client-cert/etcd-client.crt"
        keyFile: "/etc/prometheus/secrets/etcd-client-cert/etcd-client-key.key"
    prometheus:
      prometheusSpec:
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - memory-snapshot-on-shutdown
        retention: 14d
        retentionSize: 50GB
        resources:
          requests:
            cpu: 100m
            memory: 500Mi
          limits:
            memory: 2000Mi
        secrets:
          - etcd-client-cert
      ingress:
        enabled: true
        ingressClassName: external
        annotations:
          cert-manager.io/cluster-issuer: le-prod
          cert-manager.io/private-key-rotation-policy: Always
          # add auth
          nginx.ingress.kubernetes.io/auth-method: 'GET'
          nginx.ingress.kubernetes.io/auth-url: 'http://${AUTHELIA_INTERNAL_DNS}/api/verify'
          nginx.ingress.kubernetes.io/auth-signin: 'https://auth.${DOMAIN_0}?rm=$request_method'
          nginx.ingress.kubernetes.io/auth-response-headers: 'Remote-User,Remote-Name,Remote-Groups,Remote-Email'
          # homepage integration
          gethomepage.dev/description: Use Prometheus to monitor Kubernetes and applications running on Kubernetes
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Infrastructure
          gethomepage.dev/href: https://prometheus.${DOMAIN_0}/
          gethomepage.dev/icon: prometheus.svg
          gethomepage.dev/name: Prometheus
          gethomepage.dev/pod-selector: app.kubernetes.io/instance=prometheus
        hosts:
          - prometheus.${DOMAIN_0}
        tls:
          - hosts:
              - prometheus.${DOMAIN_0}
            secretName: longhorn-system-longhorn
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
              targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
              targetLabel: kubernetes_node
